namespace Fri3d_camp_logo_Led_Animator.Services;

// This class generates a C++ header file containing the animated pixel data
// for the ESP32 project.

using System.Collections.Generic;
using System.IO;
using System.Text;

public class CppHeaderGenerator
{
    /// <summary>
    /// Generates a C++ header file with the animated pixel data.
    /// </summary>
    /// <param name="data">A list of byte arrays, where each array is a frame.</param>
    /// <param name="headerFilePath">The full path where the header file will be saved.</param>
    /// <param name="arrayName">The name of the generated C++ array.</param>
    public void GenerateHeaderFile(List<byte[]> data, string headerFilePath, string arrayName)
    {
        var sb = new StringBuilder();

        // Add standard header guards to prevent multiple inclusions.
        string headerGuard = arrayName.ToUpper() + "_H";
        sb.AppendLine($"#ifndef {headerGuard}");
        sb.AppendLine($"#define {headerGuard}");
        sb.AppendLine();

        // Add a comment to describe the contents.
        sb.AppendLine("// This file was generated by the C# web application.");
        sb.AppendLine($"// It contains the animated pixel data for {data.Count} frames.");
        sb.AppendLine();

        // Declare the total number of frames and pixels.
        sb.AppendLine($"const int TOTAL_FRAMES = {data.Count};");
        sb.AppendLine($"const int LED_COUNT = {(data.Count > 0 ? data[0].Length / 3 : 0)};");
        sb.AppendLine();

        // Declare the data array. The const keyword places the array in flash memory.
        sb.AppendLine($"const unsigned char {arrayName}[] = {{");

        // Loop through each frame and add the RGB data.
        for (int i = 0; i < data.Count; i++)
        {
            byte[] frame = data[i];

            // Add a comment for the current frame.
            sb.AppendLine($"    // Frame {i}");

            // Loop through each byte in the frame and add its hex representation.
            for (int j = 0; j < frame.Length; j++)
            {
                sb.Append($"0x{frame[j]:X2}");

                // Add a comma after each byte, but not the last one.
                if (i < data.Count - 1 || j < frame.Length - 1)
                {
                    sb.Append(", ");
                }
            }
            sb.AppendLine(); // New line for the next frame.
        }

        // Close the array declaration.
        sb.AppendLine("};");
        sb.AppendLine();

        // Add the end header guard.
        sb.AppendLine("#endif // " + headerGuard);

        // Write the StringBuilder's content to the file.
        File.WriteAllText(headerFilePath, sb.ToString());
    }
}

